# -*- coding: utf-8 -*-
"""pythonProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qymAW5mfdlsdlU2rRKGEsP_jap6bovR9

**1)	Set up a Git repository to allow you to collaborate on the Python solution.**
Link for Git repository :https://github.com/sidhu7378/pythonProject.git

::**2)	Read the daily confirmed cases and deaths into two dataframes can be found at this GitHub page:**
a)	confirmed_cases_url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
b)	deaths_url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
"""

import pandas as pd
import requests

confirmed_cases_url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
deaths_url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"

confirmed_df = pd.read_csv(confirmed_cases_url)
deaths_df = pd.read_csv(deaths_url)

"""**3)	Use pandas to create a dataframe that aggregates and sums both confirmed cases and deaths on a global level. then generate a dataframe of the total confirmed cases and deaths for all the countries in the world.**"""

total_cases = confirmed_df.iloc[:, 4:].sum().max()
total_deaths = deaths_df.iloc[:, 4:].sum().max()
total_df = pd.DataFrame({
    "Total Confirmed Cases": [total_cases],
    "Total Deaths": [total_deaths]
})
total_df

"""**4)	Use AlphaVantage (the stock API used earlier in the course) to get the daily high and low prices for your selected stocks.**

* Overall American Market
* Overall Canadian Market
* Travel sector
* The Real Estate sector.
* Precious metals (Gold, Silver, Platinum, etc)



"""

import requests


API_KEY = "TC54JI2GWZOZ8I0J"
symbols = ["VOO", "XIC.TO", "EXPE", "VNQ", "IAU"]
prices_df = pd.DataFrame()

for symbol in symbols:
    url = f"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol={symbol}&outputsize=full&apikey={API_KEY}"
    response = requests.get(url)
    data = response.json()["Time Series (Daily)"]
    df = pd.DataFrame.from_dict(data, orient="index")
    df.index = pd.to_datetime(df.index)
    df = df.astype(float)
    df = df.loc["2020":"2022", ["2. high", "3. low"]]
    df.columns = [f"{symbol}_High", f"{symbol}_Low"]
    prices_df = pd.concat([prices_df, df], axis=1)

"""**5)	Append that info to the data frame created in step 2**"""

total_df = pd.concat([total_df, prices_df], axis=1)
print(total_df)

"""**an appropriate graph detailing your info**"""

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import matplotlib.ticker as ticker

confirmed_df.columns = confirmed_df.columns[:4].tolist() + pd.to_datetime(confirmed_df.columns[4:]).tolist()
deaths_df.columns = deaths_df.columns[:4].tolist() + pd.to_datetime(deaths_df.columns[4:]).tolist()

fig, ax1 = plt.subplots(figsize=(15, 9))
ax2 = ax1.twinx()

ax1.plot(confirmed_df.iloc[:, 4:].sum(), label="Total Confirmed Cases", color='blue')
ax1.plot(deaths_df.iloc[:, 4:].sum(), label="Total Death Cases", color='red')
ax1.set_xlabel("Date")
ax1.legend()

ax1.xaxis.set_major_locator(mdates.MonthLocator(interval=1))
ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))

plt.setp(ax1.xaxis.get_majorticklabels(), rotation=90, ha='right')
ax1.grid(True)  # add gridlines to ax1

prices_df.plot(ax=ax2, color='black')
ax2.set_ylabel("Stock Prices", color='blue')
ax2.tick_params(axis='y', labelcolor='blue')
prices_df[[col for col in prices_df.columns if 'High' in col]].plot(ax=ax2, linestyle='solid', color='green')
prices_df[[col for col in prices_df.columns if 'Low' in col]].plot(ax=ax2, linestyle='dotted', color='purple')
ax2.grid(True)  # add gridlines to ax2

ax2.set_title("COVID-19 Cases and Stock Prices")
plt.subplots_adjust(right=0.9)

plt.show()

"""**GRAPH OUTCOMES**
The graph depicts the evolution of the association between total confirmed COVID-19 cases and stock prices. 

The blue line depicts the total number of verified COVID-19 cases, shown against the left y-axis. The data is shown across time, with the dates in a year-month format shown on the x-axis. The information has been compiled at the national level.

The stock prices are represented by the black line, which is shown against the right y-axis. The data is also shown across time, using the same dates as the blue line on the x-axis. The green line shows the greatest daily stock price, while the dotted purple line represents the lowest daily stock price.

The graph illustrates that the total number of verified COVID-19 cases and stock prices have a somewhat negative connection, with stock values falling as the number of confirmed cases grows. Furthermore, the graph depicts the stock market's volatility during the COVID-19 epidemic, as indicated by the fluctuation of stock prices between the greatest and lowest levels. 

Overall, the graph depicts the stock market's reaction to the COVID-19 epidemic and the dynamic interaction between these two significant economic indicators.

**Reason For Choosing Line Graph**
1. Line graphs are excellent for visualising trends over time. You can observe how the variable you're charting changes over time by connecting data points with lines.
2. Line graphs are useful for comparing various variables across time. Plotting numerous lines on the same graph allows you to examine how various variables change over time and compare their patterns.
3. Line graphs tend to smooth out oscillations in data because they utilise lines to link data points. This is important if you want to focus on the broad trend rather than tiny deviations.

This project was completed by the following team members:

**Kiranpal Sidhu**: Responsible for Creating git repository and creating datafram for total death and confirmed cases for Covid.aslo worked on the graph analysis and visulliation.

**Raeez**: Responsible for researching the selected stocks and industries, and retrieving stock prices from AlphaVantage.

**Preet Sonani** : Responsible for  sum, aggregate and append the data frame for graphs using Matplotlib.

Every member of the team participated to the project's conception, analysis, and interpretation of outcomes.
"""